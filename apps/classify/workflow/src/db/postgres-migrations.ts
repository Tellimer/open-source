/**
 * Postgres compatibility migrations
 * Ensures tables have expected columns/identity and constraints
 */

import type { DatabaseClient } from './types.ts';

let ran = false;

export async function ensurePostgresCompatMigrations(db: DatabaseClient) {
  if (ran) return;
  const getSql = (db as any).getSql?.bind(db as any);
  const sql = getSql ? getSql() : null;
  if (!sql) return;

  try {
    // small backoff helper for transient TLS resets
    const retry = async (fn: () => Promise<any>) => {
      let attempt = 0;
      while (true) {
        try {
          return await fn();
        } catch (e: any) {
          if (attempt >= 2) throw e;
          if (
            e &&
            (e.code === 'ECONNRESET' || /TLS|ssl/i.test(String(e.message)))
          ) {
            await new Promise((r) => setTimeout(r, 200 * (attempt + 1)));
            attempt++;
            continue;
          }
          throw e;
        }
      }
    };

    // Add processing_log.metadata JSONB if missing
    await retry(() =>
      sql.unsafe(
        `ALTER TABLE IF EXISTS processing_log
       ADD COLUMN IF NOT EXISTS metadata JSONB`
      )
    );

    // Ensure pipeline_stats.id is identity/sequence-backed
    // Prefer IDENTITY; fallback to sequence if needed
    await retry(() =>
      sql.unsafe(
        `DO $$
       BEGIN
         BEGIN
           ALTER TABLE pipeline_stats
           ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY;
         EXCEPTION WHEN others THEN
           BEGIN
             IF NOT EXISTS (
               SELECT 1 FROM pg_class WHERE relname = 'pipeline_stats_id_seq'
             ) THEN
               CREATE SEQUENCE pipeline_stats_id_seq;
             END IF;
             ALTER TABLE pipeline_stats
               ALTER COLUMN id SET DEFAULT nextval('pipeline_stats_id_seq');
             ALTER SEQUENCE pipeline_stats_id_seq OWNED BY pipeline_stats.id;
           END;
         END;
       END$$;`
      )
    );

    // Ensure unique constraint on batch_id
    await retry(() =>
      sql.unsafe(
        `DO $$
       BEGIN
         IF NOT EXISTS (
           SELECT 1 FROM pg_constraint
           WHERE conname = 'pipeline_stats_batch_id_key'
         ) THEN
           ALTER TABLE pipeline_stats
           ADD CONSTRAINT pipeline_stats_batch_id_key UNIQUE (batch_id);
         END IF;
       END$$;`
      )
    );
  } catch (e) {
    console.warn('[DB] Migration warning:', e);
  } finally {
    ran = true;
  }
}
